/**
 * @tips 自己封装数据库（更小、更快、更灵活）
 *      1.原生JS中的类、静态方法、继承
 *      2.ES6中的类、静态方法、继承、单例模式
 */
// ====================================================================================================
// ====================================================================================================
console.log('==================== 【ES5中的类、属性、方法、静态方法】 ====================');
// ====================================================================================================
// ====================================================================================================
function Person(name, age) {
    // 构造函数里面的方法和属性
    this.name = name;
    this.age = age;
    this.run = function() {
        console.log(`${this.name}---${this.age}`);
    }
}
// 原型链上面的属性和方法（区别：可以被多个实例共享）
Person.prototype.sex = '男';
Person.prototype.work = function() {
        console.log(`${this.name}---${this.age}---${this.sex}`);
    }
    // 静态方法
Person.setName = function() {
        console.log('静态方法');
    }
    // 实例方法是通过实例化来调用的，静态是通过类名直接调用
var person = new Person('zhangsan', '20');
person.run();
person.work();
// 执行静态方法
Person.setName();
// ====================================================================================================
// ====================================================================================================
console.log('==================== 【ES5中的继承】（一般结合使用） ====================');
// ====================================================================================================
// ====================================================================================================
function Boss(name, age) {
    this.name = name;
    this.age = age;
    this.run = function() {
        console.log(`${this.name}---${this.age}`);
    }
}
Boss.prototype.work = function() {
        console.log('work');
    }
    // 对象冒充实现继承（没法继承原型链上面的属性和方法）
function Worker(name, age) {
    Boss.call(this, name, age);
}
// 原型链继承（可以继承构造函数里面以及原型链上的属性和方法，实例化子类的时候没法给父类传参）
Worker.prototype = new Boss();
var worker = new Worker('李四', 20);
worker.run();
worker.work();
// ====================================================================================================
// ====================================================================================================
console.log('==================== 【ES6中的类、属性、方法、静态方法】 ====================');
// ====================================================================================================
// ====================================================================================================
class Dong {
    // 类的构造函数，实例化的时候执行，new的时候执行
    constructor(name, age) {
            this._name = name;
            this._age = age;
        }
        // 定义实例方法（注意：在ES6里面方法之间没有逗号(,)）
    getName() {
        console.log(this._name);
    }
    setName(name) {
            this._name = name;
        }
        // 定义静态方法
    static work() {
        console.log('这是ES6里面的静态方法');
    }
}
Dong.instance = '这也可以说是一个静态方法';
var dong = new Dong('东', '20');
dong.getName();
dong.setName('东东');
dong.getName();
Dong.work();
console.log(Dong.instance);
// ====================================================================================================
// ====================================================================================================
console.log('==================== 【ES6中的继承】 ====================');
// ====================================================================================================
// ====================================================================================================
class Fulei {
    constructor(name, age) {
        this._name = name;
        this._age = age;
    }
    getInfo() {
        console.log(`${this._name}---${this._age}`);
    }
    run() {
        console.log('run');
    }
}
class Zilei extends Fulei {
    // 实例化子类的时候把子类的数据传给父类
    constructor(name, age, sex) {
        super(name, age);
        this._sex = sex;
    }
    print() {
        console.log(this._sex);
    }
}
var zilei = new Zilei('张三', '30', '男');
zilei.print();
zilei.getInfo();
zilei.run();
// ====================================================================================================
// ====================================================================================================
console.log('==================== 【ES6中的单例】 ====================');
// ====================================================================================================
// ====================================================================================================
class SingleTon {
    static getInstance() {
        if (!SingleTon.instance) {
            SingleTon.instance = new SingleTon();
        }
        return SingleTon.instance;
    }
    constructor() {
        console.log('构造函数里面的方法');
        this.connect();
    }
    connect() {
        console.log('连接数据库...');
    }
    find() {
        console.log('查寻数据库...');
    }
}
var singleton1 = SingleTon.getInstance();
var singleton2 = SingleTon.getInstance();
var singleton3 = SingleTon.getInstance();
singleton1.find();
singleton2.find();

// 计时的一个方法
console.time('start');
setTimeout(() => {
    console.timeEnd('start');
}, 1234);