<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.xu.tt</groupId>
	<artifactId>TT</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<!-- <packaging>war</packaging> -->

	<name>TT</name>
	<description>Demo project for Spring Boot</description>

	<!-- Spring Boot 启动父依赖(引入这个之后相关的引入就不需要添加version配置，spring boot会自动选择最合适的版本进行添加) -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
		<relativePath />
		<!-- lookup parent from repository -->
	</parent>

	<!-- 指定Jar包版本 -->
	<properties>
		<start-class>com.xu.tt.Application</start-class>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<lombok.version>1.16.12</lombok.version>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<!-- Spring boot starter(核心启动器，包含了自动配置、日志和YAML) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<!-- <exclusions> -->
			<!-- <exclusion> -->
			<!-- <groupId>ch.qos.logback</groupId> -->
			<!-- <artifactId>logback-classic</artifactId> -->
			<!-- </exclusion> -->
			<!-- </exclusions> -->
		</dependency>
		<!-- Web 依赖/Spring Boot Web 支持:mvc,aop...(支持全栈式Web开发，包括Tomcat和spring-webmvc) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!-- 排除默认的Tomcat,引入Jetty容器. -->
			<!-- <exclusions> -->
			<!-- <exclusion> -->
			<!-- <groupId>org.springframework.boot</groupId> -->
			<!-- <artifactId>spring-boot-starter-tomcat</artifactId> -->
			<!-- </exclusion> -->
			<!-- </exclusions> -->
		</dependency>
		<!-- Jetty 容器 -->
		<!-- <dependency> -->
		<!-- <groupId>org.springframework.boot</groupId> -->
		<!-- <artifactId>spring-boot-starter-jetty</artifactId> -->
		<!-- </dependency> -->
		<!-- Undertow 容器 -->
		<!-- <dependency> -->
		<!-- <groupId>org.springframework.boot</groupId> -->
		<!-- <artifactId>spring-boot-starter-undertow</artifactId> -->
		<!-- </dependency> -->
		<!-- 测试依赖/Test(单元测试,只在test测试里面运行) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- junit(上面有了，不再重复) -->
		<!-- <dependency> -->
		<!-- <groupId>junit</groupId> -->
		<!-- <artifactId>junit</artifactId> -->
		<!-- <version>4.12</version> -->
		<!-- </dependency> -->
		<!-- configuration/配置处理器【@ConfigurationProperties的执行器配置，注解需要,配置元数据文件】【有时候要用传统的xml或properties配置】 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
		</dependency>
		<!-- aop【不好用啊】 -->
		<!-- <dependency> -->
		<!-- <groupId>org.springframework.boot</groupId> -->
		<!-- <artifactId>spring-boot-starter-aop</artifactId> -->
		<!-- </dependency> -->
		<!-- aspectj【@Aspect需要】 -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.9</version>
		</dependency>
		<!-- lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
		</dependency>
		<!-- jdbc -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<!-- mybatis【spring-boot mybatis依赖】 -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.1</version>
		</dependency>
		<!-- mysql【数据库驱动】 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
			<!-- <version>5.1.46</version> -->
		</dependency>
		<!-- oracle -->
		<!--<dependency> -->
		<!--<groupId>oracle</groupId> -->
		<!--<artifactId>ojdbc14</artifactId> -->
		<!--<version>10.2.0.3.0</version> -->
		<!--</dependency> -->
		<!-- druid -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.1.10</version>
		</dependency>
		<!-- Thymeleaf 模板引擎，依赖 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<!-- redis -->
		<dependency>
			<!-- <groupId>org.springframework.boot</groupId> -->
			<!-- <artifactId>spring-boot-starter-data-redis</artifactId> -->
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>2.9.0</version>
		</dependency>
		<!-- fastjson -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.38</version>
		</dependency>
		<!-- codec -->
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.11</version>
		</dependency>
		<!-- beanutils -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.3</version>
		</dependency>
		<!-- lang3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.7</version>
		</dependency>
		<!-- commons-fileupload -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>
		<!-- commons-io -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.5</version>
		</dependency>
		<!-- log4j【dubbo需要】 -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<!-- javassist【compareTo方法需要】 -->
		<!-- <dependency> -->
		<!-- <groupId>org.javassist</groupId> -->
		<!-- <artifactId>javassist</artifactId> -->
		<!-- <version>3.22.0-GA</version> -->
		<!-- </dependency> -->
		<!-- mail -->
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4.7</version>
		</dependency>
		<!-- 发送邮件 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<!-- 引入模板引擎 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>
		<!-- 【freemarker需要，不然报错】 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>3.2.4.RELEASE</version>
		</dependency>
		<!-- zookeeper -->
		<dependency>
			<groupId>org.apache.zookeeper</groupId>
			<artifactId>zookeeper</artifactId>
			<version>3.4.7</version>
		</dependency>
		<!-- curator-framework【对zookeeper的底层api的一些封装】 -->
		<dependency>
			<groupId>org.apache.curator</groupId>
			<artifactId>curator-framework</artifactId>
			<version>2.12.0</version>
		</dependency>
		<!-- curator-test【方便进行测试，不需要启动真实的zookeeper服务端】 -->
		<dependency>
			<groupId>org.apache.curator</groupId>
			<artifactId>curator-test</artifactId>
			<version>2.12.0</version>
		</dependency>
		<!-- curator-recipes【封装了一些高级特性，如：Cache事件监听、选举、分布式锁、分布式计数器、分布式Barrier等】 -->
		<dependency>
			<groupId>org.apache.curator</groupId>
			<artifactId>curator-recipes</artifactId>
			<version>2.12.0</version>
		</dependency>
		<!-- httpclient -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.6</version>
		</dependency>
		<!-- pagehelper【mybatis-spring-boot-starter不要使用1.0.0版本，因为还不支持拦截器插件】 -->
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper-spring-boot-starter</artifactId>
			<version>1.2.5</version>
		</dependency>
		<!-- dom4j -->
		<dependency>
			<groupId>org.dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>2.0.0</version>
		</dependency>
		<!-- 文档自动生成 swagger2 -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<!-- <version>2.6.1</version> -->
			<version>2.9.2</version>
		</dependency>
		<!-- 文档自动生成 swagger-ui -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<!-- <version>2.6.1</version> -->
			<version>2.9.2</version>
		</dependency>
		<!-- 【com/google/common/base/Moreobjects】 -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>20.0</version>
		</dependency>
		<!-- websocket -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>
		<!-- ehcache -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>2.8.3</version>
		</dependency>
		<!-- poi -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.9</version>
		</dependency>
		<!-- mybatis 逆向生成工具 -->
		<dependency>
			<groupId>org.mybatis.generator</groupId>
			<artifactId>mybatis-generator-core</artifactId>
			<version>1.3.2</version>
			<scope>compile</scope>
			<optional>true</optional>
		</dependency>
		<!--mapper -->
		<dependency>
			<groupId>tk.mybatis</groupId>
			<artifactId>mapper-spring-boot-starter</artifactId>
			<version>1.2.4</version>
		</dependency>
		<!-- protobuf -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>3.7.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.3</version>
		</dependency>
		<!-- netty -->
		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty-all</artifactId>
			<version>4.1.32.Final</version>
		</dependency>
		<!-- jpush -->
		<dependency>
			<groupId>cn.jpush.api</groupId>
			<artifactId>jpush-client</artifactId>
			<version>3.3.10</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjdk.jol/jol-core -->
		<dependency>
			<groupId>org.openjdk.jol</groupId>
			<artifactId>jol-core</artifactId>
			<version>0.9</version>
		</dependency>

		<!-- tomcat 的 provided 依赖 -->
		<!-- <dependency> -->
		<!-- <groupId>org.springframework.boot</groupId> -->
		<!-- <artifactId>spring-boot-starter-tomcat</artifactId> -->
		<!-- <scope>provided</scope> -->
		<!-- </dependency> -->
		<!-- devtools 热部署 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
	</dependencies>

	<build>
		<!-- 打出来的war包的名字 -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- Spring Boot Maven 插件/打jar包 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- maven-war-plugin 插件【不加也行】 -->
			<!-- <plugin> -->
			<!-- <groupId>org.apache.maven.plugins</groupId> -->
			<!-- <artifactId>maven-war-plugin</artifactId> -->
			<!-- <configuration> -->
			<!-- <failOnMissingWebXml>false</failOnMissingWebXml> -->
			<!-- </configuration> -->
			<!-- </plugin> -->
			<!-- 防止打包时Test报错 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skipTests>true</skipTests>
				</configuration>
			</plugin>
		</plugins>
		<!-- 加上，找Jar包时报错，T_T -->
		<!-- <plugin> -->
		<!-- <artifactId>maven-compiler-plugin</artifactId> -->
		<!-- <configuration> -->
		<!-- <source>1.8</source> -->
		<!-- <target>1.8</target> -->
		<!-- </configuration> -->
		<!-- </plugin> -->
	</build>

</project>
